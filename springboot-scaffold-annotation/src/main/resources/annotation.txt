
相关注解含义

1.
@Component
把普通pojo实例化到spring容器中，相当于配置文件中的<bean id="userMan" class="com.flx.spring.entity.UserMan">

2.
@AliasFor
在Spring的众多注解中，经常会发现很多注解的不同属性起着相同的作用，比如@RequestMapping的value属性和path属性，
这就需要做一些基本的限制，比如value和path的值不能冲突，比如任意设置value或者设置path属性的值，都能够通过另一个属性来获取值等等。
为了统一处理这些情况，Spring创建了@AliasFor标签。

public @interface RequestMapping {

    @AliasFor("path")
    String[] value() default {};

    @AliasFor("value")
    String[] path() default {};
}

3.
@Configuration
标注在类上，相当于把该类作为spring的xml配置文件中的<beans>，作用为：配置spring容器(应用上下文)

4.
@Bean
@Bean标注在方法上(返回某个实例的方法)，等价于spring的xml配置文件中的<bean>，作用为：注册bean对象

@Scope("prototype")将bean设置为原型模式，默认为单例模式
注：
(1)@Bean注解在返回实例的方法上，如果未通过@Bean指定bean的名称，则默认与标注的方法名相同；
(2)@Bean注解默认作用域为单例singleton作用域，可通过@Scope(“prototype”)设置为原型作用域；
(3)既然@Bean的作用是注册bean对象，那么完全可以使用@Component、@Controller、@Service、@Ripository等注解注册bean，当然需要配置@ComponentScan注解进行自动扫描。

5.
@Import
容器会自动注册这个组件，id默认是全类名
@Import注解把用到的bean导入到了当前ioc容器中,类似于@Bean，但是只能作用在类上

使用方式
@Import({ImportBean.class})
public class MyClass{

}

6.
@ImportSelector
自定义类继承ImportSelector接口并实现下面方法
public String[] selectImports(AnnotationMetadata annotationMetadata) {
   return new String[0];
}
1、返回值： 就是我们实际上要导入到容器中的组件全类名【重点 】
2、参数： AnnotationMetadata表示当前被@Import注解给标注的所有注解信息【不是重点】

7.
@DependsOn(value = "com.flx.springboot.scaffold.common.context.SpringContextUtil")
表示在这个类初始化之后在进行初始化

5.
@EnableXXX注解






















